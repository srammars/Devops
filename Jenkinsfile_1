pipeline {
    agent any

    // Définition des outils, ici Maven 3.5.2
    tools {
        maven 'maven-3.5.2'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

       stage('Build and Test') {
        steps {
            script {
                dir('C:/Users/sramm/OneDrive/Documents/Devops/demo/') {
                    // Assurez-vous que le chemin est correct et que Jenkins a les droits nécessaires
                    // pour accéder à ce répertoire
                    def mvnHome = tool 'maven-3.5.2'
                    withEnv(["PATH+MAVEN=${mvnHome}/bin"]) {
                        sh "mvn clean test"
                    }
                }
            }
        }
    }


        stage('Modify Test to Fail') {
            steps {
                script {
                    // Modification du fichier CalculatorTest.java pour introduire un échec
                    def calculatorTestPath = "src/test/java/com/example/demo/CalculatorTest.java"
                    sh "echo \"import static org.junit.Assert.fail;\\n\\npublic class CalculatorTest {\\n\\n@Test\\npublic void testFailing() {\\n    fail(\\\"This test intentionally fails.\\\")\\n}\\n}\" > $calculatorTestPath"
                }
            }
        }

        stage('Build with Failing Test') {
            steps {
                // Utilisation de Maven pour compiler avec le test modifié
                script {
                    def mvnHome = tool 'maven-3.5.2'
                    withEnv(["PATH+MAVEN=${mvnHome}/bin"]) {
                        // Exécution des tests, mais en excluant CalculatorTest
                        sh "mvn clean test -Dtest=!CalculatorTest"
                    }
                }
            }
        }

        stage('Ignore Test') {
            steps {
                // Ignorer le test modifié pour obtenir un build correct
                script {
                    def mvnHome = tool 'maven-3.5.2'
                    withEnv(["PATH+MAVEN=${mvnHome}/bin"]) {
                        // Ignorer les tests pour cette étape
                        sh "mvn clean test -Dmaven.test.skip=true"
                    }
                }
            }
        }
    }

    post {
        always {
            // Publier les résultats des tests avec le plugin JUnit
            junit '**/target/surefire-reports/*.xml'
        }
    }
}
